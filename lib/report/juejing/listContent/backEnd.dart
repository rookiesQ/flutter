
import 'package:flutter/cupertino.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'dart:convert';
import 'package:hk_app/util/http.dart';
import 'package:hk_app/report/juejing/detail.dart';
class listContent extends StatefulWidget {
  dynamic list,_listData;
  listContent(this.list):super();
  @override
  _listContentState createState() => _listContentState();
}

class _listContentState extends State<listContent> with AutomaticKeepAliveClientMixin{
  @override
  bool get wantKeepAlive => true;
  Future<Null> _onRefresh() async{
    await Future.delayed(Duration(seconds:2),(){
      print(widget.list.id);
      getArticle(category:widget.list.id,before: '').then((res){
        Map<String, dynamic> json = jsonDecode(res);
        if (json['m']=='ok'){
           widget._listData.clear();
          if (json['d']['total'] >0){
            setState(() {
              widget._listData=json['d']['entrylist'];
           
            });
            
          }
        }
      });
    });
  }
  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: getArticle(category:widget.list.id),
      builder: (context ,AsyncSnapshot snapshot){
         //print(snapshot.toString());
         switch (snapshot.connectionState) {
          case ConnectionState.none: 
          return StateNone();
          break;
          case ConnectionState.waiting: 
          return StateNone();
          break;
          case ConnectionState.done: 
              Map<String, dynamic> json = jsonDecode(snapshot.data);
              //var data = Autogenerated.fromJson(json);
              if (json['m']=='ok'){
               
                if (json['d']['total'] >0){
                  widget._listData =  json['d']['entrylist'];
                  return RefreshIndicator(
                    child:ListContentMore(list: widget._listData,id:widget.list.id),
                    onRefresh: _onRefresh,
                  );
                } else {
                  return EmptyData();
                }
                
              } else{
                return EmptyData();
              }
            break;
          
          case ConnectionState.active:
            return StateNone();
            break;
        }
        return null;
        
      },
    );
  }
}

// 构建未获取数据渲染界面
class StateNone extends StatefulWidget {
  @override
  _StateNoneState createState() => _StateNoneState();
}

class _StateNoneState extends State<StateNone> {
  @override
  Widget build(BuildContext context) {
    return Container(
      child: Center(child: Text('加载中'),),
    );
  }
}
// 构建未获取数据渲染界面
class EmptyData extends StatefulWidget {
  @override
  _EmptyDataState createState() => _EmptyDataState();
}

class _EmptyDataState extends State<EmptyData> {
  @override
  Widget build(BuildContext context) {
    return Container(
      child: Center(child: Text('暂无数据'),),
    );
  }
}

// 加载列表数据


class ListContentMore extends StatefulWidget {
  final list;
  final id;
  ListContentMore({this.list,this.id}):super();
  @override
  _ListContentMoreState createState() => _ListContentMoreState();
}

class _ListContentMoreState extends State<ListContentMore> with AutomaticKeepAliveClientMixin{
  @override
  bool get wantKeepAlive => true;
  bool isPerformingRequest = false;
  ScrollController _scrollController = new ScrollController();
  @override
  void initState(){
    super.initState();
    print('12312');
    _scrollController.addListener((){
      var lastPosition = widget.list[widget.list.length-1]['rankIndex'];
      if(_scrollController.position.pixels >=_scrollController.position.maxScrollExtent){
        listViewMore(lastPosition);
      }
    });
  }

  // 获取下一页的数据
  void listViewMore(last){
    if(!isPerformingRequest){
      setState(() {
        isPerformingRequest = true;
      });
      getArticle(category:widget.id,before: last).then((res){
        Map<String, dynamic> json = jsonDecode(res);
        if (json['m']=='ok'){
          if (json['d']['total'] >0){
            setState(() {
              widget.list.addAll(json['d']['entrylist']);
              isPerformingRequest = false;
            });
            
          }
        }
      });
    }
  }

  // 获取和处理下一页的数据
  Widget build(BuildContext context) {
     super.build(context);
    return ListView.builder(
      itemCount: widget.list.length+1,
      controller:  _scrollController,
      
      itemBuilder: (BuildContext context ,int position){
        if(position == widget.list.length)
           return Center(
             child:new Opacity(
                opacity: isPerformingRequest ? 1.0 : 0.0,
                child: new CircularProgressIndicator(),
              ),
           );
        else 
          return  ListItem(listitem:widget.list[position]);
        
      },
    );
  }
 
}

// 构建listitem单个
class ListItem extends StatefulWidget {
  final listitem;
  ListItem({this.listitem}):super();
  @override
  _ListItemState createState() => _ListItemState();
}

class _ListItemState extends State<ListItem> {

  @override
  Widget build(BuildContext context) {
    var tagsTitle = '';
    for(var i=0;i<widget.listitem['tags'].length;i++){
      if(tagsTitle !=''){
          tagsTitle +='/'+widget.listitem['tags'][i]['title'];
      } else{
          tagsTitle +=widget.listitem['tags'][i]['title'];
      }
    }
    return GestureDetector(
      child: Column(
            children: <Widget>[
              widget.listitem['user']['avatarLarge']!= null ? Flex(
                direction: Axis.horizontal,
              
                children: <Widget>[
                  Expanded(
                    flex: 2,
                    child: Row(children: <Widget>[
                       Container(
                          margin: EdgeInsets.fromLTRB(20, 20, 5, 0),
                          child: ClipOval(
                            child: widget.listitem['user']['avatarLarge']!= null ? 
                              Image.network(
                                widget.listitem['user']['avatarLarge'],
                                width: 20,
                                height:20,
                                fit:BoxFit.fill,
                              )
                              : 
                              Image(
                                image: AssetImage("assets/images/common/my_portrait.png"),
                                width: 20,
                                height: 20,
                                fit:BoxFit.fill,
                              ),
                          ),
                        ),
                        Expanded(
                          child: 
                           Container(
                            margin: EdgeInsets.fromLTRB(0, 20, 5, 0),
                            child: Text(
                              widget.listitem['user']['username'],
                              overflow:TextOverflow.ellipsis,
                              maxLines:1
                            )
                          ),
                        )
                       
                    ],),
                  ),
                  Expanded(
                    flex: 2,
                    child: Container(
                      child:  
                          Text(
                              tagsTitle,
                              overflow:TextOverflow.ellipsis,
                              maxLines:1,
                              style: TextStyle(),
                            ),
                      alignment: Alignment.topRight,
                      padding: EdgeInsets.fromLTRB(0, 20, 20, 0)
                    ),
                  )
                 
              ],) : Text(''),
              Container(
                padding: EdgeInsets.fromLTRB(20, 5, 20, 0),
                alignment: Alignment.topLeft,
                child:Text(widget.listitem['title'],style: TextStyle(fontSize: 18),)
              ),
               Container(
              
                padding: EdgeInsets.fromLTRB(20, 5, 20, 20),
                child:Text(
                  widget.listitem['content'],
                  style: TextStyle(fontSize: 14,color: Colors.grey),
                  textAlign: TextAlign.justify,
                  overflow:TextOverflow.ellipsis,
                  maxLines:3,
                )
              ),
               Divider()
            ]
          ),
          onTap:(){
            
             Navigator.push(context,MaterialPageRoute(builder:(BuildContext context){
                return Detail(list:widget.listitem);
             }));
          }
    );
  }
}